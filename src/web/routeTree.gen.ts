/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminProductsIndexRouteImport } from './routes/admin/products/index'
import { Route as ApiRpcSplatRouteImport } from './routes/api.rpc.$'
import { Route as ApiAuthSplatRouteImport } from './routes/api.auth.$'
import { Route as AdminProductsGadgetbotsNewRouteImport } from './routes/admin/products/gadgetbots/new'
import { Route as AdminProductsGadgetbotsIdIndexRouteImport } from './routes/admin/products/gadgetbots/$id/index'
import { Route as AdminProductsGadgetbotsIdEditRouteImport } from './routes/admin/products/gadgetbots/$id/edit'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminProductsIndexRoute = AdminProductsIndexRouteImport.update({
  id: '/admin/products/',
  path: '/admin/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminProductsGadgetbotsNewRoute =
  AdminProductsGadgetbotsNewRouteImport.update({
    id: '/admin/products/gadgetbots/new',
    path: '/admin/products/gadgetbots/new',
    getParentRoute: () => rootRouteImport,
  } as any)
const AdminProductsGadgetbotsIdIndexRoute =
  AdminProductsGadgetbotsIdIndexRouteImport.update({
    id: '/admin/products/gadgetbots/$id/',
    path: '/admin/products/gadgetbots/$id/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AdminProductsGadgetbotsIdEditRoute =
  AdminProductsGadgetbotsIdEditRouteImport.update({
    id: '/admin/products/gadgetbots/$id/edit',
    path: '/admin/products/gadgetbots/$id/edit',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin': typeof AdminIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/products/gadgetbots/new': typeof AdminProductsGadgetbotsNewRoute
  '/admin/products/gadgetbots/$id/edit': typeof AdminProductsGadgetbotsIdEditRoute
  '/admin/products/gadgetbots/$id': typeof AdminProductsGadgetbotsIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin': typeof AdminIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/products/gadgetbots/new': typeof AdminProductsGadgetbotsNewRoute
  '/admin/products/gadgetbots/$id/edit': typeof AdminProductsGadgetbotsIdEditRoute
  '/admin/products/gadgetbots/$id': typeof AdminProductsGadgetbotsIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/': typeof AdminIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/admin/products/gadgetbots/new': typeof AdminProductsGadgetbotsNewRoute
  '/admin/products/gadgetbots/$id/edit': typeof AdminProductsGadgetbotsIdEditRoute
  '/admin/products/gadgetbots/$id/': typeof AdminProductsGadgetbotsIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/admin'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/admin/products'
    | '/admin/products/gadgetbots/new'
    | '/admin/products/gadgetbots/$id/edit'
    | '/admin/products/gadgetbots/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/admin/products'
    | '/admin/products/gadgetbots/new'
    | '/admin/products/gadgetbots/$id/edit'
    | '/admin/products/gadgetbots/$id'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/admin/'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/admin/products/'
    | '/admin/products/gadgetbots/new'
    | '/admin/products/gadgetbots/$id/edit'
    | '/admin/products/gadgetbots/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  AdminIndexRoute: typeof AdminIndexRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiRpcSplatRoute: typeof ApiRpcSplatRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
  AdminProductsGadgetbotsNewRoute: typeof AdminProductsGadgetbotsNewRoute
  AdminProductsGadgetbotsIdEditRoute: typeof AdminProductsGadgetbotsIdEditRoute
  AdminProductsGadgetbotsIdIndexRoute: typeof AdminProductsGadgetbotsIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/admin/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/products/gadgetbots/new': {
      id: '/admin/products/gadgetbots/new'
      path: '/admin/products/gadgetbots/new'
      fullPath: '/admin/products/gadgetbots/new'
      preLoaderRoute: typeof AdminProductsGadgetbotsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/products/gadgetbots/$id/': {
      id: '/admin/products/gadgetbots/$id/'
      path: '/admin/products/gadgetbots/$id'
      fullPath: '/admin/products/gadgetbots/$id'
      preLoaderRoute: typeof AdminProductsGadgetbotsIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/products/gadgetbots/$id/edit': {
      id: '/admin/products/gadgetbots/$id/edit'
      path: '/admin/products/gadgetbots/$id/edit'
      fullPath: '/admin/products/gadgetbots/$id/edit'
      preLoaderRoute: typeof AdminProductsGadgetbotsIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  AdminIndexRoute: AdminIndexRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiRpcSplatRoute: ApiRpcSplatRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
  AdminProductsGadgetbotsNewRoute: AdminProductsGadgetbotsNewRoute,
  AdminProductsGadgetbotsIdEditRoute: AdminProductsGadgetbotsIdEditRoute,
  AdminProductsGadgetbotsIdIndexRoute: AdminProductsGadgetbotsIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
